// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit);, consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM);. The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step); rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A]);
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1); or continue executing
                         // the current program (reset==0);.

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M);
        pc[15];          // address of next instruction

    PARTS:
    // A-instruction
    // 0value (value is 15-bit number);
    // Store value in A register
    // instruction[0..15] => A register

    // C-instruction
    // 111 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3

    // Leftmost bit of instruction determines whether A or C instruction
    // instruction[16] switches between A and C instruction

    // Mux the instruction and the ALU output going into the A register. When do
    // we choose between the instruction and ALU output for the A register?
    // C-instruction can store the result in the A register (e.g. loading
    // pointer into A register); What is the indication whether we should select
    // between the instruction and ALU output?
    // ALU output when it's a C instruction storing the result in the A reg
    // Instruction all other times? (A-instruction doesn't need the ALU?, maybe
    // we need to send the A instruction through the CPU anyway?);
    Mux16(a=instruction, b=aluOut, sel=instruction[15], out=muxInsALUOut); // sel should be 1 when we want to store the ALU output in the A

    // A register
    // If instruction[15] == 0, it's an A instruction, so load instruction[0..14]
    // into the A register
    Register(in=muxInsALUOut, load=writeA, out=aOut, out[0..14]=addressM);

    // A & M mux
    // instruction[12] is the "a" bit, which selects between A and M
    Mux16(a=aOut, b=inM, sel=instruction[12], out=muxAMOut); // sel should be 1 when instruction requests value from ram

    // D register
    Register(in=aluOut, load=writeD, out=dOut); // load should be 1 when storing to D

    ALU(x=dOut, y=muxAMOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=aluZrOut, ng=aluNgOut);

    // writeM (d3);
    And(a=instruction[3], b=instruction[15], out=writeM);

    // writeD (d2);
    And(a=instruction[4], b=instruction[15], out=writeD);

    // Not the first bit to determine whether or not to store A register
    Not(in=instruction[15], out=notFirstBit);
    // writeA (d1); - should be true if first bit is 0 or instruction[5]/d1 is true
    Or(a=instruction[5], b=notFirstBit, out=writeA);

    // JUMPS
    // Not the ALU outs for ease of use later
    // GT (alu out is greater than 0);
    // aluZrOut == 0 AND aluNgOut == 0
    Not(in=aluNgOut, out=notAluNgOut);
    And(a=notAluZrOut, b=notAluNgOut, out=aluGtOut);

    // EQ (alu out is equal to 0);
    // No-op: aluZrOut is this already

    // LT (alu out is less than 0);
    // aluZrOut == 0 AND aluNgOut == 1
    Not(in=aluZrOut, out=notAluZrOut);
    And(a=notAluZrOut, b=aluNgOut, out=aluLtOut);

    // j1 (instruction[2]); AND aluLtOut => j1Out
    And(a=instruction[2], b=aluLtOut, out=j1Out);
    // j2 (instruction[1]); AND aluEqOut/aluZrOut => j2Out
    And(a=instruction[1], b=aluZrOut, out=j2Out);
    // j3 (instruction[0]); AND aluGtOut => j3Out
    And(a=instruction[0], b=aluGtOut, out=j3Out);
    // j1Out OR j2Out OR j3Out => load PC
    Or(a=j1Out, b=j2Out, out=j1OutOrJ2Out);
    Or(a=j1OutOrJ2Out, b=j3Out, out=preJumpOut);
    // Make sure it's a C instruction before jumping
    And(a=preJumpOut, b=instruction[15], out=jumpOut);
    // Inc when jumpOut == 0
    Not(in=jumpOut, out=notJumpOut);
    PC(in=aOut, load=jumpOut, inc=notJumpOut, reset=reset, out[0..14]=pc);
}
